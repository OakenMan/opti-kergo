### Données ###

- Un ensemble d'hôtels :
	> string[] hotels ; représente une liste d'ID ? (genre h0, h1, h2...)

- Un ensemble de POI :
	> poi[] poids; avec poi = structure du type {string id, int score, int openHour, int closeHour} ?
	> id = "p0, p1, p2..." 
	> score = un score compris entre 0 et X ?
	> openHour et closeHour = temps en minutes depuis 00h00 ? (donc compris entre 0 et 1440)

- Un hôtel de départ :
	> string startHotel
	> doit être dans la liste d'hotels

- Un hôtel d'arrivée :
	> string endHotel
	> idem que pour le départ

- Durée du voyage en jours :
	> int nbDays;

- Durée max du trajet par jour (en minutes) :
	> int[] maxDuration;

- Matrice de durées entre les différents lieux ?
	> map<string, string, int> ? (je sais même pas si c'est possible)
	> les 2 premiers strings sont les ID des lieux concernés et l'int la durée entre les deux
	> on pourrait acceder facilement aux durée : durée entre h0 et p1 = map.get(h0, p1);
	> le tableau aurait une gueule comme ça ---> cf idée modèle

### Contraintes ###

- Chaque jour, on part d'un hotel et on arrive à un hôtel

- Chaque jour, on ne dépasse pas la durée max de l'itinéraire

- On ne visite jamais 2 fois le même POI

- (On peut passer plusieurs fois par la même hotel)

### Fonction objectif ###

- FO = Somme(Score de tous les POI visités)

### Codage de la solution ###

- Idée 1 un peu bof :

	> string[] = (h0) p1 p3 p2 h1 p4 p7 h2 p0 p6 p5 (h2)

### ALGO GENETIQUE & MODELE ###

Score/Evaluation:
	Forte pénalités pour les solution irréalisables -> réécriture de la fonction de score, 2 composantes : le score du trajet
		et un score de faisabilité (0 pour faisable, infini pour très irréalisable), permet une séléction plus "affine" en fonction de différents paramètres

Génération aléatoire :
	On accepte les solutions irréalisables
	Hotels intermédiaires : 100% pif 
	POIs/jour : au pif pif tant que la durée total du trajet n'a pas dépasse durée max du jour/2
	Date de départ : au pif entre 0 et durée max d'une journée - durée max trajet du jour

	Pour la suite :
	Se resteindre à un espace de solutions irréalisables

Croisement:
	Hotels : Croisement de séquence idiot
	POIs : opérateur de croisement : PMX, on travaille juste sur un seul jour
	Date départ : croisement de séquence idiot

Mutation:
	2 mutations nécessaires : On ajoute et enlève aléatoirement 2 POIs
	Mutations hotel : échange avec tout les autres hotels possibles
	Mutations date : on change la date 
	
	Echange de 2 POIs entre eux

-Population de base générée aléatoirement
	n chaînes de caractères ou de bits.
	1 caractère correspond à 1 gène
-Évaluation
	à chaque chaîne, une note correspondant à son adaptation au problème.
-Sélection
	tirage au sort de n/2 couples de chaînes sur une roue biaisée.
	Chaque chaîne a une probabilité d’être tirée proportionnelle à son adaptation au problème.
	Optimisation possible : si l’individu le plus adapté n’a pas été sélectionné, il est copié d’office dans la génération intermédiaire à la place d’un individu choisi aléatoirement.
-Croisement et mutation
	Chaque couple donne 2 chaînes filles.
	-Enjambement. Probabilité : 70 %. Emplacement de l'enjambement choisi aléatoirement.
		Exemple :
		Chaînes parents : A : 00110100 ; B : 01010010
		Chaînes filles : A’ : 00010010 ; B’ : 01110100
		Croisement en 2 points plus efficace.
	-Mutations des chaînes filles. Probabilité : de 0,1 à 1 %.
		Inversion d’un bit au hasard ou remplacement au hasard d’un caractère par un autre.
		Probabilité fixe ou évolutive (auto-adaptation).
		On peut prendre probabilité = 1/nombre de bits.